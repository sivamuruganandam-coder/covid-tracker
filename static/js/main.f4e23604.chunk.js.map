{"version":3,"sources":["components/card/Cards.js","components/chart/Charts.js","api/ChartAPI.js","api/CardAPI.js","components/country-picker/CountryPicker.js","api/CountryPickerAPI.js","App.js","serviceWorker.js","index.js"],"names":["Cards","confirmed","recovered","death","lastUpdate","className","Container","Row","Col","sm","md","lg","Card","body","style","borderBottom","CardText","CardTitle","start","end","duration","separator","Date","toDateString","Charts","date","country","line","data","labels","datasets","label","borderColor","backgroundColor","fill","bar","value","options","legend","display","title","text","color","textAlign","ChartAPI","names","countryName","url","useState","dailyData","setDailyData","setConfirmed","setRecovered","setDeath","useEffect","fetchChart","a","fetch","response","json","deaths","map","totalConfirmed","total","reportDate","key","CardAPI","name","confirm","setConfirm","recover","setRecover","setLastUpdate","fetchCard","CountryPicker","countrys","setCountry","countries","Form","marginTop","width","Input","type","onChange","e","target","i","CountryPickerAPI","setCountries","fetchCountry","item","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f4e23604.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport CountUp from 'react-countup';\r\nimport { Container, Row, Col, Card, CardTitle, CardText } from 'reactstrap';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction Cards({ confirmed, recovered, death, lastUpdate }) {\r\n  if (!death) {\r\n    return 'loading...'\r\n  }\r\n  return (\r\n    <div className=\"Card\">\r\n      <Container >\r\n        <Row className=\"d-flex flex-row justify-content-center mr-auto ml-auto\" >\r\n          <Col sm=\"12\" md=\"12\" lg=\"3\" >\r\n            <div >\r\n              <Card className=\"custom rounded bg-warning text-white \" body style={{ borderBottom: \"10px solid yellow\" }}>\r\n                <CardText><b>Infected</b></CardText>\r\n                <CardTitle><b>\r\n                  <CountUp\r\n                    start={0}\r\n                    end={confirmed}\r\n                    duration={2.5}\r\n                    separator=\",\"\r\n                  /></b>\r\n                </CardTitle>\r\n                <CardText>Last Updated: <b>{new Date(lastUpdate).toDateString()}</b></CardText>\r\n                <CardText><b>Number of active cases of COVID-19</b></CardText>\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n          <Col sm=\"12\" md=\"12\" lg=\"3\" >\r\n            <div  >\r\n              <Card className=\"custom rounded bg-success  text-white\" body style={{ borderBottom: \"10px solid green\" }}>\r\n                <CardText><b>Recovered</b></CardText>\r\n                <CardTitle><b>\r\n                  <CountUp\r\n                    start={0}\r\n                    end={recovered}\r\n                    duration={2.5}\r\n                    separator=\",\"\r\n                  /></b>\r\n                </CardTitle>\r\n                <CardText>Last Updated: <b>{new Date(lastUpdate).toDateString()}</b></CardText>\r\n                <CardText><b>Number of recoveries from COVID-19</b></CardText>\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n          <Col sm=\"12\" md=\"12\" lg=\"3\">\r\n            <div>\r\n              <Card className=\"custom rounded bg-danger text-white\" body style={{ borderBottom: \"10px solid red\" }}>\r\n                <CardText><b>Deaths</b></CardText>\r\n                <CardTitle><b>\r\n                  <CountUp\r\n                    start={0}\r\n                    end={death}\r\n                    duration={2.5}\r\n                    separator=\",\"\r\n                  /></b>\r\n                </CardTitle>\r\n                <CardText>Last Updated: <b>{new Date(lastUpdate).toDateString()}</b></CardText>\r\n                <CardText><b>Number of deaths caused by COVID-19</b></CardText>\r\n              </Card>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\nexport default Cards\r\n","import React from 'react'\r\nimport { Line, Bar } from 'react-chartjs-2'\r\n\r\n\r\nfunction Charts({ confirmed, death, date, recovered, country }) {\r\n\r\n    const line = (\r\n        <Line\r\n            data={{\r\n                labels: date,\r\n                datasets: [{\r\n                    data: confirmed,\r\n                    label: \"Infected\",\r\n                    borderColor: \"blue\",\r\n                    backgroundColor: \"grey\",\r\n                    fill: true\r\n                }, {\r\n                    data: death,\r\n                    label: \"Death\",\r\n                    borderColor: \"red\",\r\n                    backgroundColor: \"tomato\",\r\n                    fill: true\r\n                }]\r\n            }}\r\n        />\r\n    )\r\n    const bar = (\r\n        <Bar\r\n            data={{\r\n                labels: ['Infected', 'Recovered', 'Death'],\r\n                datasets: [{\r\n                    label: 'People',\r\n                    backgroundColor: [\r\n                        '#eed202',\r\n                        'green',\r\n                        '#e51a4c'\r\n                    ],\r\n                    data: [confirmed.value, recovered.value, death.value]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend: { display: false },\r\n                title: { display: true, text: `Current situation in ${country}.` },\r\n            }}\r\n        />\r\n    )\r\n    if (!death) {\r\n        return 'loading..';\r\n    }\r\n    return (\r\n        <div className=\"Charts\" style={{ color: \"black\", textAlign: \"center\" }}>\r\n            <h1>Graph</h1>\r\n            {(country) ? bar : line}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Charts\r\n","import React, { useEffect, useState } from 'react';\r\nimport Charts from '../components/chart/Charts';\r\n\r\nfunction ChartAPI({ countryName }) {\r\n\r\n    let names = countryName;\r\n    let url = (names) ? (`https://covid19.mathdro.id/api/countries/${names}`) : ('https://covid19.mathdro.id/api/daily');\r\n\r\n    var [dailyData, setDailyData] = useState([]);\r\n    var [confirmed, setConfirmed] = useState({});\r\n    var [recovered, setRecovered] = useState({});\r\n    var [death, setDeath] = useState({});\r\n\r\n    useEffect(() => {\r\n        fetchChart();\r\n    }, [names]);\r\n\r\n    const fetchChart = async () => {\r\n        const response = await fetch(`${url}`);\r\n        const data = await response.json();\r\n        if (!names) {\r\n            setDailyData(data);\r\n        } else {\r\n            setConfirmed(data.confirmed);\r\n            setRecovered(data.recovered);\r\n            setDeath(data.deaths);\r\n        }\r\n\r\n    }\r\n\r\n    if (!names) {\r\n        confirmed = dailyData.map(value => (\r\n            value.totalConfirmed\r\n        ))\r\n        death = dailyData.map(value => (\r\n            value.deaths.total\r\n        ))\r\n        var date = dailyData.map(value => (\r\n            value.reportDate\r\n        ))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"ChartAPI\">\r\n            <Charts key={date} confirmed={confirmed} death={death} date={date} recovered={recovered} country={names} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChartAPI\r\n","import React, { useEffect, useState } from 'react';\r\nimport Cards from '../components/card/Cards';\r\nimport ChartAPI from '../api/ChartAPI';\r\n\r\n\r\nfunction CardAPI({ name }) {\r\n    let names = name;\r\n    let url = (names) ? (`https://covid19.mathdro.id/api/countries/${names}`) : ('https://covid19.mathdro.id/api');\r\n\r\n    const [confirm, setConfirm] = useState({});\r\n    const [recover, setRecover] = useState({});\r\n    const [death, setDeath] = useState({});\r\n    const [lastUpdate, setLastUpdate] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        fetchCard();\r\n    }, [names]);\r\n\r\n    const fetchCard = async () => {\r\n        const response = await fetch(`${url}`);\r\n        const data = await response.json();\r\n        setConfirm(data.confirmed);\r\n        setRecover(data.recovered);\r\n        setDeath(data.deaths);\r\n        setLastUpdate(data.lastUpdate);\r\n    }\r\n\r\n    return (\r\n        <div className=\"CardAPI\">\r\n            <div>\r\n                <Cards confirmed={confirm.value} recovered={recover.value} death={death.value} lastUpdate={lastUpdate} />\r\n                <ChartAPI countryName={names} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardAPI","import React, { useState } from 'react'\r\nimport { Form, Input } from 'reactstrap';\r\nimport CardAPI from '../../api/CardAPI';\r\nimport '../../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nfunction CountryPicker({ countrys }) {\r\n    const [country, setCountry] = useState(\"\");\r\n\r\n    const countries = countrys;\r\n\r\n    const updateSearch = (e) => {\r\n        setCountry(e.target.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"CountryPicker\">\r\n            <Form className=\"mr-auto ml-auto\" style={{ marginTop: \"10%\", width: \"80%\" }}>\r\n                <Input type=\"select\" onChange={updateSearch}>\r\n                    <option value={\"\"}> Global</option>\r\n                    {countries.map((country, i) => (<option key={i} value={country}>{country}</option>))}\r\n                </Input>\r\n\r\n            </Form>\r\n            <CardAPI name={country} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React, { useEffect, useState } from 'react';\r\nimport CountryPicker from '../components/country-picker/CountryPicker';\r\n\r\n\r\nfunction CountryPickerAPI() {\r\n    const [countries, setCountries] = useState([])\r\n\r\n    const fetchCountry = async () => {\r\n        const response = await fetch('https://covid19.mathdro.id/api/countries/');\r\n        const data = await response.json();\r\n        setCountries(data.countries);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchCountry();\r\n    }, []);\r\n\r\n    const countryName = countries.map(item => (\r\n        item.name\r\n    ))\r\n\r\n    return (\r\n        <div className=\"CountryPickerAPI\">\r\n            <CountryPicker key={countryName} countrys={countryName} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryPickerAPI\r\n","import React from 'react';\nimport './App.css';\n\nimport CountryPickerAPI from './api/CountryPickerAPI';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div>\n        <CountryPickerAPI />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}